Mr.Carl, a student in a school asked a question by his Math Teacher
Mr.Carl is given starting two numbers of an arithmatic sequence, 
num1, num2. He can calculate the next number in the sequence as 
the sum of the last two numbers in the arithmetic sequence so far.

this is new line
Your task is to help Mr.Carl to implement the arithmetic sequence accordingly.
And return the Kth Number the in the sequence (including num1, num2).


Input Format:
-------------
Three space seprated integers, num1, num2, K.


Output Format:
--------------
Print the Kth number in the sequence starts with num1 and num2.




Sample Input-1:
---------------
1 2 5


Sample Output-1:
----------------
8


Explanation:
------------
The arithmetic sequence is:
1, 2, 3, 5, 8




Sample Input-2:
---------------
2 5 6


Sample Output-2:
----------------
31


Explanation:
------------
The arithmetic sequence is:
2, 5, 7, 12, 19, 31


import java.util.*;
class Solution{
    static int a,b;
    public static int recur(int n){
        if(n==1){
            return a;
        }
        if(n==2){
            return b;
        }
        return recur(n-1)+recur(n-2);
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        a=sc.nextInt();
        b=sc.nextInt();
        int c=sc.nextInt();
        System.out.println(recur(c));
    }
}
************************************************
In a colony drinking water is supplied through water tanks.
There is a big queue of N buckets, The supplier needs to fill all the N buckets
in the queue. The supplier can fill one bucket or two buckets at a time.


Your task is to find the number of distinct ways, the supplier can fill all buckets.


Input Format:
-------------
An integer N, number of buckets in the queue 1 <= N <= 40.


Output Format:
--------------
Print the number of ways to fill all the buckets.




Sample Input-1:
---------------
2


Sample Output-1:
----------------
2


Explanation:
------------
There are two ways to fill the buckets.
1. 1 bucket + 1 bucket
2. 2 buckets




Sample Input-2:
---------------
4


Sample Output-2:
----------------
5


Explanation:
------------
There are five ways to fill the buckets.
1. 1 bucket + 1 bucket + 1 bucket + 1 bucket
2. 1 bucket + 1 bucket + 2 buckets 
3. 1 bucket + 2 buckets + 1 bucket
4. 2 buckets + 1 bucket + 1 bucket
5. 2 buckets + 2 buckets


import java.util.*;
class Solution{
    public static int recur(int n){
        if(n<=2){
            return n;
        }
        return recur(n-1)+recur(n-2);
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(recur(n));
    }
}
*****************************************************
Ms Sonali Sharma is given a task. She has an habit of reading the words 
from the end to the start (i.e., if the original word is Hello,  
she reads it as "olleH").


Your task is to help her to read the word properly, 
by following the rules:
    - You are given a word W,
    - Rearrange the characters from end to start in the word.
    - And print the word.


NOTE: 
 - W contains only lowercase letters.
 
Input Format:
-------------
A string W, word.


Output Format:
--------------
Print a string result.




Sample Input-1:
---------------
divide


Sample Output-1:
----------------
edivid


Explanation:
------------
After rearranging the characters from end to start, the word is : edivid 




Sample Input-2:
---------------
racing


Sample Output-2:
----------------
gnicar


Explanation:
------------
After rearranging the characters from end to start, the word is : gnicar


class Solution{
    static String helper2(String s){
        if(s.equals("")){
            return s;
        }
        return helper2(s.substring(1))+s.charAt(0);
    }
    static String helper(char c[], int l,int r){
        if(l>=r){
            return String.valueOf(c);
        }
        char t=c[l];
        c[l++]=c[r];
        c[r--]=t;
        return helper(c,l,r);
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        //System.out.println(helper(s.toCharArray(),0,s.length()-1));
        System.out.println(helper2(s));
    }
}
********************************************************
Mr.John doe is working with Numbers.
He is given a number N. He wants to check whether N,
obeys the following conditions or not:
        - Initialize P=0, extract each digit 'd' from N, add them to P=> P = P + d^2.
        - Add set N value to P as N=P.
        - and repeat the process until the N equals 1 or 
        if N loops endlessly in a cycle without having 1. 


Your task is to help Mr John to check whether N becomes 1 or Not.
If yes, print "true", otherwise print "false".


Note: A^B indicates A to power of B.


Input Format:
-------------
An integer N


Output Format:
--------------
Print a boolean value.




Sample Input-1:
---------------
19


Sample Output-1:
----------------
true


Explanation:
------------
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1




Sample Input-2:
---------------
89


Sample Output-2:
----------------
false


Explanation:
------------
8^2 + 9^2 = 145
1^2 + 4^2 + 5^2 = 42
4^2 + 2^2 = 20
2^2 + 0^2 = 4
4^2  = 16
1^2 + 6^2 = 37
3^2 + 7^2 = 58
5^2 + 8^2 = 89
We got a cycle, so return "false"


import java.util.*;
class Solution{
    public static Set<Integer> s=new HashSet<>();
    public static int get_digits_square(int n){
        int r=0;
        while(n>0){
            r+=Math.pow(n%10,2);
            n/=10;
        }
        return r;
    }
    public static boolean happy(int n){
        if(n==1){
            return true;
        }
        if(!s.add(get_digits_square(n))){
            return false;
        }
        System.out.println(n);
        return happy(get_digits_square(n));
    }
    public static boolean happy2(int n1, int n2){
        if(n1==1 || n2==1){
            return true;
        }
        if(n1==n2){
            return false;
        }
        n1=get_digits_square(n1);
        n2=get_digits_square(get_digits_square(n2));
        return happy2(n1,n2);
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(happy2(n,get_digits_square(n)));
    }
}
*******************************************************************
Mr.Aravind is provided a list of various building heights in a city, heights[], 
which consists of all positive integers.


Mr.Aravind has two assignments. They are as follows: 
- Calculate the minimum height-minH and maximum height-maxH from heights[]. 
- Determine the highest common factor between minH and MaxH.


Your task is to help Mr.Aravind to complete his assignments and 
to return the HCF of minH and maxH.


Input Format:
-------------
Space separated integers, heights of the buildings, heights[].


Output Format:
--------------
Print an integer result, HCF of minH and maxH.




Sample Input-1:
---------------
16 8 12 24 36


Sample Output-1:
----------------
4


Explanation:
------------
minH is 8 and maxH is 36, and the HCF(8, 36) is 4




Sample Input-2:
---------------
19 23 2 5 7 9 11 13


Sample Output-2:
----------------
1


Explanation:
------------
minH is 2 and maxH is 23, and HCF(2, 23) is 1


import java.util.*;
class Solution{
    static int gcdhelper(int a, int b){
        if(b==0){
            return a;
        }
        return gcdhelper(b,a%b);
    }
    static int gcdforarray(int a[]){
        Arrays.sort(a);
        int min=a[0], max=a[a.length-1];
        return gcdhelper(min,max);
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        String x[]=sc.nextLine().split(" ");
        int a[]=new int[x.length];
        for(int i=0; i<x.length; i++){
            a[i]=Integer.parseInt(x[i]);
        }
        System.out.println(gcdforarray(a));
    }
}
********************************************************************************
A XY-Mirror Number is defined as a legitimate number,
if the provided number 'X', and then get Mirror image of number X 
horizontally as Xh and then get Mirror image of number Xh vertically as Xv.
and then X is valid, if 'X'='Xv'. Otherwise, 'X' is not a An XY-Mirror number.


Mr. John is given an integer N.
Your task is to help Mr. John to check whether N is XY-Mirror Number or Not.
If N is XY-Mirror number, print 'true', Otherwise 'false'.


Note: XY-Mirror Number is always a positive integer.


Input Format:
-------------
An integer, N.


Output Format:
--------------
Print the boolean value.




Sample Input-1:
---------------
69


Sample Output-1:
----------------
true




Sample Input-2:
---------------
969


Sample Output-2:
----------------
false


Note: Look at the Hint


import java.util.*;
class Solution{
    static StringBuilder sb=new StringBuilder();
    static String pat;
    public static boolean isStobogramatic(String s){
        if(s.equals("")){
            return sb.reverse().toString().equals(pat);
        }
        char c=s.charAt(0);
        if(c=='6'){
            sb.append('9');
        }
        else if(c=='9'){
            sb.append('6');
        }
        else if(c=='1' || c=='0' || c=='8'){
            sb.append(c);
        }
        else{
            return false;
        }
        return isStobogramatic(s.substring(1));
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        pat=sc.nextLine();
        System.out.println(isStobogramatic(pat));
    }
}
*************************************************************************************
Mr.John is experimenting with numbers. Some of the numbers he discovered 
are U-Turn Numbers. A U-Turn number is defined as a legitimate number,
if the provided number 'X' is turned in a U shape (Mirror image of the number X 
horizontally as Xh and Mirror image of the number Xh vertically as Xv) 
and then X is valid if 'X'='Xv'. Otherwise, 'X' is not a U-Turn number.


i.e, 11 is a U-Turn Number, 6969 is a legal U-Turn Number, 
where as 696, 161 and 343 are not valid U-Turn Numbers.


Mr. John is handed the integer L, which represents the length of U-Turn number.


Your task is to help Mr. John in finding all U-Turn numbers with length L 
in the number system and print them in sorted order.


Note: U-Turn number is always a positive integer, because if you turn -11 
in U shape, it will be 11-, which is not a valid number.


Input Format:
-------------
An integer L, the length of U-Turn numbers.


Output Format:
--------------
Print the list of U-Turn numbers of length L.




Sample Input-1:
---------------
1


Sample Output-1:
----------------
[0, 1, 8]




Sample Input-2:
---------------
2


Sample Output-2:
----------------
[11, 69, 88, 96]


Note: Look at the Hint


import java.util.*;
class Main{
    public static List<String> generate(int n, int num){
        List<String> s=new ArrayList<>();
        if(n==0){
            s.add("");
            return s;
        }
        if(n==1){
            s.add("0");
            s.add("1");
            s.add("8");
            return s;
        }
        List<String> ts=generate(n-2, num);
        for(String x: ts){
            if(n!=num){
                s.add('0'+x+'0');   
            }
            s.add('1'+x+'1');
            s.add('6'+x+'9');
            s.add('8'+x+'8');
            s.add('9'+x+'6');
        }
        Collections.sort(s);
        return s;
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        List<String> s=generate(n,n);
        for(String x: s){
            System.out.print(Integer.parseInt(x)+" ");
        }
        System.out.println();
    }
}


*********************************************************************
Subrahmanyam is working with numbers
He is given a list of numbers, his task is to find the priority number. 
The priority number is the number that occured more than 'list.length/2' times.


You may assume that the list is non-empty 
and the priority number always exist in the array.


Input Format:
-------------
line-1: an integer N, list size.
line-2: N space separated integers, numbers in the list[].


Output Format:
--------------
An integer, the priority number of the set.




Sample Input-1:
---------------
2
3 2 3


Sample Output-1:
----------------
3


Explanation:
------------
3 appeared 2 times(more then 3/2 times),where as 2 appeared 1 time.
So, 3 is the priority number.




Sample Input-2:
---------------
7
2 2 1 1 1 2 2


Sample Output-2:
----------------
2


Explanation:
------------
2 appeared 4 times(more then 7/2 times),where as 1 appeared 3 times.
So, 2 is the priority number.


import java.util.*;
class Solution{
    public static int partition(int a[],int l, int h){
        int i=l-1, pi=a[h];
        for(int j=l; j<=h-1; j++){
            if(a[j]<pi){
                i++;
                int t=a[i];
                a[i]=a[j];
                a[j]=t;
            }
        }
        int t=a[i+1];
        a[i+1]=a[h];
        a[h]=t;
        return i+1;
    }
    public static void quicksort(int a[],int l, int h){
        if(l<h){
            int pivot=partition(a,l,h);
            quicksort(a,l,pivot-1);
            quicksort(a,pivot+1,h);
        }
    }
    public static int getPriorityNumber(int a[]){
        quicksort(a,0,a.length-1);
        // for(int i:a){
        //     System.out.print(i+" ");
        // }
        // System.out.println();
        return a[a.length/2];
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0; i<n; i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(getPriorityNumber(arr));
    }
}
********************************************************************
import java.util.*;
class Node{
    int data;
    int count;
    Node left, right;
    Node(int d){
        data=d;
        count=1;
        left=null;
        right=null;
    }
}
class BST{
    Node root=null;
    int traverser(Node r,int n){
        if(r==null){
            return -1;
        }
        if(r.count>n){
            return r.data;
        }
        if(root.left!=null){
            return traverser(r.left,n);
        }
        return traverser(r.right,n);
    }
    Node append(Node r,int d){
        if(r==null){
            Node nptr=new Node(d);
            return nptr;
        }
        else if(r.data==d){
            r.count++;
            return r;
        }
        else if(r.data>d){
            r.left=append(r.left,d);
            return r;
        }
        else{
            r.right=append(r.right,d);
            return r;
        }
    }
}
class Main{
    public static int majority_using_bst(int a[]){
        BST bst=new BST();
        for(int i: a){
            bst.root=bst.append(bst.root,i);
        }
        return bst.traverser(bst.root,a.length/2);
    }
    public static int majority_using_hashmap(int a[]){
        Map<Integer,Integer> m=new HashMap<>();
        for(int i=0; i<a.length; i++){
            m.put(a[i], m.getOrDefault(a[i],0)+1);
        }
        int req=a.length/2;
        for(int i:m.keySet()){
            if(m.get(i)>req){
                return i;
            }
        }
        return -1;
    }
    public static int majority_using_boyre_moore(int a[]){
        int c=0, e=-1;
        for(int i=0; i<a.length; i++){
            if(c==0){
                e=a[i];
                c=1;
            }
            else if(e==a[i]){
                c++;
            }
            else{
                c--;
            }
        }
        if(c>0){
            return e;
        }
        return -1;
    }
    public static int majority_using_bf(int a[]){
        for(int i=0; i<a.length; i++){
            int c=0;
            for(int j=0; j<a.length; j++){
                if(a[j]==a[i]){
                    c++;
                }
            }
            if(c>a.length/2){
                return a[i];
            }
        }
        return -1;
    }
    public static int majority_using_sortandfind(int a[]){
        Arrays.sort(a);
        if(a[a.length/2-1]==a[a.length/2]){
            return a[a.length/2-1];
        }
        else{
            if(a.length%2==0){
                return -1;
            }
            else{
                return a[a.length/2+1];
            }
        }
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0; i<n; i++){
            a[i]=sc.nextInt();
        }
        //System.out.println("the majority ele using HashMap: "+majority_using_hashmap(a));
        //System.out.println("the majority ele using bst: "+majority_using_bst(a));
        //System.out.println("the majority ele using boyre moore: "+majority_using_boyre_moore(a));
        //System.out.println("the majority ele using brute force: "+majority_using_bf(a));
        System.out.println("the majority ele using brute force: "+majority_using_sortandfind(a));
    }
}
**************************************************************************
Merge sort
import java.util.*;
class Main{
    public static void merge(int a[], int low, int mid, int high){
        int start=mid, end=mid+1;
        int l=low;
        while((l<=start) && (end<=high)){
            if(a[l]<a[end]){
                l++;
            }
            else{
                int t=a[end];
                for(int j=end-1; j>=l; j--){
                    a[j+1]=a[j];
                }
                a[l]=t;
                l++;
                start++;
                end++;
            }
        }
    }
    public static void mergesort(int a[], int l, int h){
        if(l>=h){
            return;
        }
        int m=(l+h)/2;
        mergesort(a,l,m);
        mergesort(a,m+1,h);
        merge(a,l,m,h);
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0; i<n; i++){
            a[i]=sc.nextInt();
        }
        mergesort(a,0,a.length-1);
        for(int i: a){
            System.out.print(i+" ");
        }
        System.out.println();
    }
}
**************************************************************************
import java.util.*;
class Solution{
    public static float power(int n, int p){
        if(p==0){
            return 1f;
        }
        else{
            if(p>0){
                return n*power(n,p-1); 
            }
            else{
                return power(n,p+1)/n;
            }
        }
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int p=sc.nextInt();
        System.out.println(power(n,p));
    }
}
*************************************************************************************
import java.util.*;
class Solution{
    public static int maxsubarray2(int a[],int l, int h){
        if(l>=h){
            return a[l];
        }
        int m=(l+h)/2;
        int left=maxsubarray2(a,l,m);
        int right=maxsubarray2(a,m+1,h);
        int intersec=helper(a,l,m,h);
        return Math.max(left,Math.max(right,intersec));
    }
    public static int helper(int a[], int l, int m, int h){
        int curr_left_sum=0, maxleftsum=0;
        int curr_right_sum=0, maxrightsum=0;
        for(int i=m-1; i>=l; i--){
            curr_left_sum+=a[i];
            maxleftsum=Math.max(maxleftsum,curr_left_sum);
        }
        for(int i=m+1; i<=h; i++){
            curr_right_sum+=a[i];
            maxrightsum=Math.max(maxrightsum,curr_right_sum);
        }
        return maxleftsum+a[m]+maxrightsum;
    }
    public static int maxsubarray(int a[]){
        int max=Integer.MIN_VALUE, t=0;
        for(int i=0; i<a.length; i++){
            t+=a[i];
            if(t>max){
                max=t;
            }
            else if(t<0){
                t=0;
            }
        }
        return max;
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0; i<n; i++){
            a[i]=sc.nextInt();
        }
        //System.out.println(maxsubarray(a));
        System.out.println(maxsubarray2(a,0,a.length-1));
    }
}
*******************************************************************************************


import java.util.*;
public class Main{
    public static int binarysearch(int a[]){
        int l=0, h=a.length-1;
        while(l<h){
            int m=(l+h)/2;
            //System.out.println(l+" "+h+" "+m+" "+a[m]);
            if(a[m]<m){
                l=m+1;
            }
            else{
                h=m;
            }
        }
        return (a[l]==l)?l:-1;
    }
        public static void main(String[] args) {
                Scanner sc=new Scanner(System.in);
                int n=sc.nextInt();
                int a[]=new int[n];
                for(int i=0; i<n; i++){
                    a[i]=sc.nextInt();
                }
                System.out.println(binarysearch(a));
        }
}
**************************************************************************
import java.util.*;
class Solution{
    public static String getsmallstring(String a[]){
        String x=a[0];
        int min=x.length();
        for(int i=1; i<a.length; i++){
            int tl=a[i].length();
            if(tl<min){
                min=tl;
                x=a[i];
            }
        }
        return x;
    }
    public static String longestcommonprefix(String a[]){
        String small=getsmallstring(a);
        Map<Character,Integer> m=new HashMap<>();
        StringBuilder sb=new StringBuilder();
        for(int i=0; i<small.length(); i++){
            m.put(small.charAt(i),0);
            for(int j=0; j<a.length; j++){
                if(!m.containsKey(a[j].charAt(i))){
                    break;
                }
                m.put(a[j].charAt(i),m.get(a[j].charAt(i))+1);
            }
            if(m.get(small.charAt(i))==a.length){
                sb.append(small.charAt(i));
            }
            else{
                break;
            }
        }
        return sb.toString();
    }
    public static String longestcommonprefix2(String a[]){
        String small=getsmallstring(a); 
        int n=small.length();
        StringBuilder sb=new StringBuilder();
        for(int i=0; i<n; i++){
            int c=0;
            for(int j=0; j<a.length; j++){
                if(a[j].charAt(i)==small.charAt(i)){
                    c++;
                }
                else{
                    break;
                }
            }
            if(c==a.length){
                sb.append(small.charAt(i));
            }
            else{
                break;
            }
        }
        return sb.toString();
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        String a[]=sc.nextLine().split(" ");
        System.out.print(longestcommonprefix(a));
        //System.out.print(longestcommonprefix2(a));
    }
}
**********************************************************************************
import java.util.*;
public class Main{
    public static String longestcommonprefix(String a[]){
        String pre=a[0];
        for(int i=1; i<a.length; i++){
            pre=common(pre,a[i]);
        }
        return pre;
    }
    public static String common(String a, String b){
        int m=a.length(), n=b.length();
        int sl=(m>n)?n:m;
        String x="";
        for(int i=0; i<sl; i++){
            if(a.charAt(i)!=b.charAt(i)){
                break;
            }
            x+=a.charAt(i);
        }
        return x;
    }
    public String longestcommonprefix2(String[] strs){
        int len=strs[0].length();
        if(len==0){
            return "";
        }
        if(strs.length==1){
            return strs[0];
        }
        int left=0, right=len-1;
        while(left+1<right){
            int mid=(left+right)/2;
            if(isMatch(strs, mid)){
                left=mid;
            } 
            else{
                right=mid;
            }
        }
        if(isMatch(strs,right)){
            return strs[0].substring(0, right + 1);
        }
        if(isMatch(strs,left)){
            return strs[0].substring(0, left + 1);
        }
        return "";
    }
    private boolean isMatch(String[] strs,int index) {
        String prefix = strs[0].substring(0,index+1);
        for(String str: strs){
            if(str.length()<index+1){
                return false;
            }
            if(!prefix.equals(str.substring(0,index+1))){
                return false;
            }
        }
        return true;        
    }
    public static String getsmallstring(String a[]){
        int min=a[0].length();
        String x=a[0];
        for(int i=1; i<a.length; i++){
            int n=a[i].length();
            if(n<min){
                min=n;
                x=a[i];
            }
        }
        return x;
    }
        public static void main(String[] args) {
                Scanner sc=new Scanner(System.in);
                String a[]=sc.nextLine().split(" ");
                //System.out.println(longestcommonprefix(a));
                System.out.println(longestcommonprefix2(a));
        }
}
***********************************************************************************************
import java.util.*;
class Solution{
    public static boolean binarysearch(int a[],int l, int h, int tar){
        if(l>h){
            return false;
        }
        int m=(l+h)/2;
        if(a[m]==tar){
            return true;
        }
        else if(a[m]<tar){
            return binarysearch(a,m+1,h,tar);
        }
        else{
            return binarysearch(a,l,m-1,tar);
        }
    }
    public static int smallestgoldenblock(int a[][]){
        for(int i: a[0]){
            int c=1;
            for(int j=1; j<a.length; j++){
                if(binarysearch(a[j],0,a[j].length-1,i)){
                    c++;
                }
                else{
                    break;
                }
            }
            //System.out.println(c);
            if(c==a.length){
                return i;
            }
        }
        return -1;
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int a[][]=new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                a[i][j]=sc.nextInt();
            }
        }
        System.out.println(smallestgoldenblock(a));
    }
}
***************************************************
import java.util.*;
class Solution{
    public static int sum(int a[]){
        int s=0;
        for(int i=0; i<a.length; i++){
            s=s+a[i];
        }
        return s;
    }
    public static int minsamosa(int a[],int time){
        int l=1, r=sum(a);
        while(l<r){
            int mid=(l+r)/2;
            if(caneat(a,time,mid)){
                r=mid;
            }
            else{
                l=mid+1;
            }
        }
        return l;
    }
    public static boolean caneat(int a[],int t,int mid){
        int v=0;
        for(int i=0; i<a.length; i++){
            v+=a[i]/mid;
            if(a[i]%mid!=0){
                v++;
            }
        }
        if(v>t){
            return false;
        }
        return true;
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        String s[]=sc.nextLine().split(" ");
        int time=sc.nextInt();
        int a[]=new int[a.length];
        for(int i=0;i<h.length;i++){
            a[i]=Integer.valueOf(s[i]);
        }
        System.out.println(minsamosa(a,time));
    }
}
******************************************************************************
import java.util.*;
class Solution{
    public static int getspeed(int a[], int time){
        int ms=0, c=0;
        do{
            int i=0;
            c=0;
            ms++;
            while(i<a.length){
                c+=a[i]/ms;
                if(a[i]%ms!=0){
                    c++;
                }
                i++;
            }
            //System.out.println(ms+" "+c);
        }while(c>time);
        return ms;
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        Queue<Integer> q=new LinkedList<>();
        String s[]=sc.nextLine().split(" ");
        int a[]=new int[s.length];
        for(int i=0; i<s.length; i++){
            a[i]=Integer.parseInt(s[i]);
        }
        int time=sc.nextInt();
        System.out.println(getspeed(a, time));
    }
}
************************************************************************